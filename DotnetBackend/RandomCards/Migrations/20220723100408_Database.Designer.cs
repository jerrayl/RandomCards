// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RandomCards;

namespace RandomCards.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220723100408_Database")]
    partial class Database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.15");

            modelBuilder.Entity("RandomCards.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("RandomCards.Entities.BonusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BonusTypes");
                });

            modelBuilder.Entity("RandomCards.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Effect")
                        .HasColumnType("TEXT");

                    b.Property<int>("ElementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Identifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Production")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tier")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("RandomCards.Entities.BuildingCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuildingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ElementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("BuildingCosts");
                });

            modelBuilder.Entity("RandomCards.Entities.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("RandomCards.Entities.GameRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Identifier")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StatusTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatusTypeId");

                    b.ToTable("GameRooms");
                });

            modelBuilder.Entity("RandomCards.Entities.PlayerBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BonusTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BonusTypeId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerBonuses");
                });

            modelBuilder.Entity("RandomCards.Entities.PlayerBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoardSpace")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuildingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerBuildings");
                });

            modelBuilder.Entity("RandomCards.Entities.PlayerProduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ElementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerProductions");
                });

            modelBuilder.Entity("RandomCards.Entities.PlayerResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ElementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerResources");
                });

            modelBuilder.Entity("RandomCards.Entities.PlayerSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GameRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCurrentPlayer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GameRoomId");

                    b.ToTable("PlayerSessions");
                });

            modelBuilder.Entity("RandomCards.Entities.PlayerTroop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoardSlot")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoardSpace")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TroopId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TroopId");

                    b.ToTable("PlayerTroops");
                });

            modelBuilder.Entity("RandomCards.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("RandomCards.Entities.StatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StatusTypes");
                });

            modelBuilder.Entity("RandomCards.Entities.Troop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ElementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Identifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tier")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.ToTable("Troops");
                });

            modelBuilder.Entity("RandomCards.Entities.TroopCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ElementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TroopId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TroopId");

                    b.ToTable("TroopCosts");
                });

            modelBuilder.Entity("RandomCards.Entities.Building", b =>
                {
                    b.HasOne("RandomCards.Entities.Element", "Element")
                        .WithMany()
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");
                });

            modelBuilder.Entity("RandomCards.Entities.BuildingCost", b =>
                {
                    b.HasOne("RandomCards.Entities.Building", null)
                        .WithMany("BuildingCosts")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RandomCards.Entities.GameRoom", b =>
                {
                    b.HasOne("RandomCards.Entities.StatusType", "StatusType")
                        .WithMany()
                        .HasForeignKey("StatusTypeId");

                    b.Navigation("StatusType");
                });

            modelBuilder.Entity("RandomCards.Entities.PlayerBonus", b =>
                {
                    b.HasOne("RandomCards.Entities.BonusType", "BonusType")
                        .WithMany()
                        .HasForeignKey("BonusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandomCards.Entities.PlayerSession", "Player")
                        .WithMany("PlayerBonuses")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BonusType");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RandomCards.Entities.PlayerBuilding", b =>
                {
                    b.HasOne("RandomCards.Entities.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandomCards.Entities.PlayerSession", "Player")
                        .WithMany("PlayerBuildings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RandomCards.Entities.PlayerProduction", b =>
                {
                    b.HasOne("RandomCards.Entities.Element", "Element")
                        .WithMany()
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandomCards.Entities.PlayerSession", "Player")
                        .WithMany("PlayerProductions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RandomCards.Entities.PlayerResource", b =>
                {
                    b.HasOne("RandomCards.Entities.Element", "Element")
                        .WithMany()
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandomCards.Entities.PlayerSession", "Player")
                        .WithMany("PlayerResources")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RandomCards.Entities.PlayerSession", b =>
                {
                    b.HasOne("RandomCards.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandomCards.Entities.GameRoom", "GameRoom")
                        .WithMany()
                        .HasForeignKey("GameRoomId");

                    b.Navigation("Account");

                    b.Navigation("GameRoom");
                });

            modelBuilder.Entity("RandomCards.Entities.PlayerTroop", b =>
                {
                    b.HasOne("RandomCards.Entities.PlayerSession", "Player")
                        .WithMany("PlayerTroops")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandomCards.Entities.Troop", "Troop")
                        .WithMany()
                        .HasForeignKey("TroopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Troop");
                });

            modelBuilder.Entity("RandomCards.Entities.Request", b =>
                {
                    b.HasOne("RandomCards.Entities.Account", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandomCards.Entities.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RandomCards.Entities.Troop", b =>
                {
                    b.HasOne("RandomCards.Entities.Element", "Element")
                        .WithMany()
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");
                });

            modelBuilder.Entity("RandomCards.Entities.TroopCost", b =>
                {
                    b.HasOne("RandomCards.Entities.Troop", null)
                        .WithMany("TroopCosts")
                        .HasForeignKey("TroopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RandomCards.Entities.Building", b =>
                {
                    b.Navigation("BuildingCosts");
                });

            modelBuilder.Entity("RandomCards.Entities.PlayerSession", b =>
                {
                    b.Navigation("PlayerBonuses");

                    b.Navigation("PlayerBuildings");

                    b.Navigation("PlayerProductions");

                    b.Navigation("PlayerResources");

                    b.Navigation("PlayerTroops");
                });

            modelBuilder.Entity("RandomCards.Entities.Troop", b =>
                {
                    b.Navigation("TroopCosts");
                });
#pragma warning restore 612, 618
        }
    }
}
